#include <iostream>
#include <vector>
using namespace std;

class Employee{
private:
    string name;
    string surname;
    string ssn;

public:
    Employee(const string& n, const string& s, const string& sn): name(n), surname(s), ssn(sn){}
    virtual ~Employee(){}
    string getName()const{
        return name;
    }
    string getSurname()const{
        return surname;
    }
    string getSsn()const{
        return ssn;
    }
    virtual double earnings()const = 0; //pure virtual function
    virtual void print()const{
        cout << "Name: ";
        getName();
        cout << "\nSurname: ";
        getSurname();
        cout << "\nSSN: ";
        getSsn();
        cout << endl;
    }
};

class BasePlusCommissionEmployee : public CommissionEmployee{
public:
    
    BasePlusCommissionEmployee(const string& n, const string& s, const string& sn, double sal, double r,double sala): CommissionEmployee(n,s,sn,sal,r){
        salary = sala;
    }
    double earnings()const override{
        return CommissionEmployee::earnings() + getSalary();
    }
    double getSalary()const{
        return salary;
    }
    void print()const override{
        CommissionEmployee::print();
        cout << "Salary: ";
        getSalary();
        cout << endl;
    }
private:
    double salary;
};

class CommissionEmployee: public Employee{
private:
    double sales;
    double rate;
    
public:
    CommissionEmployee(const string& n, const string& s, const string& sn, double sal, double r): Employee(n,s,sn), sales(sal), rate(r){}
    virtual ~CommissionEmployee(){}
    double getSale()const{
        return sales;
    }
    double getRate()const{
        return rate;
    }
    double earnings()const override{
        return sales * rate;
    }
    void print()const override{
        Employee::print();
        cout << "Sales: ";
        getSale();
        cout << "\nRate: ";
        getRate();
        cout << endl;
    }
};

class SalariedEmployee: public Employee{
private:
    double salary;
    
public:
    SalariedEmployee(const string& n, const string& s, const string& sn, double sa): Employee(n,s,sn), salary(sa){}
    virtual ~SalariedEmployee(){}
    double earnings()const override{
        return salary;
    }
    double getSalary()const{
        return salary;
    }
    void print()const override{
        Employee::print();
        cout << "Salary: ";
        getSalary();
        cout << endl;
    }
};

void virtualViaPointer(const Employee* const baseClassPtr){
    baseClassPtr->print();
    cout << "\nearned $" << baseClassPtr->earnings() << "\n\n"; // use -> with pointers
}
void virtualViaReference(const Employee &baseClassRef){
    baseClassRef.print();
    cout << "\nearned $" << baseClassRef.earnings() << "\n\n"; // use . operator with references
}

int main() {
    SalariedEmployee salariedEmployee( "John", "Smith", "111-11-1111", 800 );
    CommissionEmployee commissionEmployee("Sue", "Jones", "333-33-3333", 10000, .06 );
    BasePlusCommissionEmployee basePlusCommissionEmployee( "Bob", "Lewis", "444-44-4444", 5000, .04, 300);
    
    vector<Employee*>employees(3);
    
    employees[0] = &salariedEmployee;
    employees[1] = &commissionEmployee;
    employees[2] = &basePlusCommissionEmployee;
    
    cout << "Virtual function calls made off base-class pointers:\n\n";
    for(const Employee *employeeptr : employees){
        virtualViaPointer(employeeptr);
    }
    
    cout << "Virtual function calls made off base-class references:\n\n";
    for(const Employee *employeeptr : employees){
        virtualViaReference(*employeeptr);
    }
    
    return 0;
}
